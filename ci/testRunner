#!java --source 17

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.CopyOption;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * For a list of exe:
 * - Runs spice86 headless on each of them to collect runtime data in a folder with the exe name
 * - Imports the code in ghidra and runs the plugin on it to generate a .cs file
 * - Creates an empty dotnet project
 * - Moves the generated code there
 * - Builds the generated dotnet project
 * - Runs it and makes it dump ram
 * - Compares ram with the original run
 */
public class TestRunner {
  private Configuration configuration;
  private Log log = new Log();

  public static void main(String[] args) throws Exception {
    Configuration configuration = new CommandLineParser().generateConfiguration(args);
    new TestRunner(configuration).run();
  }

  public TestRunner(Configuration configuration) {
    this.configuration = configuration;
  }

  private void run() throws Exception {
    installSpice86Template();
    Map<String, File> tests = discoverBins(configuration.testBinRoot);
    File workspace = generateWorkspace();
    int currentTest = 0;
    for (Map.Entry<String, File> testEntry : tests.entrySet()) {
      currentTest++;
      log.logSectionSpace();
      log.info("Test " + currentTest + "/" + tests.size());
      String testName = testEntry.getKey();
      if(configuration.testsToSkip.contains(testName)) {
        log.info("Skipping " + testName+" as it is in the list of tests to skip");
        continue;
      }
      runOneTest(workspace, testName, testEntry.getValue());
      log.logSectionSpace();
    }
  }

  private File generateWorkspace() throws IOException {
    if (configuration.workspace != null) {
      return new File(configuration.workspace);
    }
    return Files.createTempDirectory("spice86-ghidra-plugin-ci").toFile();
  }

  private void installSpice86Template() throws IOException, InterruptedException {
    Utils.runExecutable("dotnet", "new", "install", "Spice86.Templates");
  }

  private void runOneTest(File workspace, String testName, File testExe) throws Exception {
    log.setContext("Test: " + testName);
    log.logSection("Test started");

    File workspaceForTest = new File(workspace.getCanonicalPath() + "/" + testName);
    File emulatedRunRoot = Utils.mkdir(workspaceForTest, "emulatedRun");
    runSpice86(testExe, emulatedRunRoot);
    File ghidraProjectRoot = Utils.mkdir(workspaceForTest, "ghidra");
    runGhidra(emulatedRunRoot, ghidraProjectRoot);
    File generatedCodeTestProjectRoot = Utils.mkdir(workspaceForTest, "generatedCodeTestProject");
    File generatedCode = new File(emulatedRunRoot.getCanonicalPath() + "/GeneratedCode.cs");
    File generatedExe = createAndBuildTestProject(generatedCodeTestProjectRoot, generatedCode, testExe);
    log.logSection("Running generated code " + generatedCodeTestProjectRoot);
    File generatedRunRoot = Utils.mkdir(workspaceForTest, "generatedRun");
    runSpice86(generatedExe, testExe, generatedRunRoot);
    if (!compareMemoryDumps(emulatedRunRoot, generatedRunRoot)) {
      handleTestFailure(testName, testExe, emulatedRunRoot, ghidraProjectRoot, generatedCodeTestProjectRoot);
    }
    log.setContext(null);
  }

  private void handleTestFailure(String testName, File testExe, File emulatedRunRoot, File ghidraProjectRoot, File generatedCodeTestProjectRoot) {
    log.error("Test failed for " + testName);
    String ghidraCommandToRun =
        "export SPICE86_DUMPS_FOLDER=" + emulatedRunRoot + " && " + configuration.ghidraHome + "/ghidraRun "
            + ghidraProjectRoot + "/spice86dumpMemoryDump.bin.gpr";
    log.info(
        "You can execute the following command to import the project into ghidra and diagnose with the gui: "
            + ghidraCommandToRun);
    log.info("C# project folder to import: " + generatedCodeTestProjectRoot);
    String spice86DebugCommand = configuration.spice86Exe+" --GdbPort=10000 --Exe "+testExe;
    log.info("Spice86 debug mode: " + spice86DebugCommand);
    System.exit(1);
  }

  private Map<String, File> discoverBins(String root) {
    return new TreeMap<>(Stream.of(new File(root).listFiles())
        .filter(file -> file.getName().endsWith(".bin"))
        .collect(Collectors.toMap(file -> file.getName().replaceAll("\\.bin", ""), file -> file)));
  }

  private void runSpice86(File exe, File dataOutputFolder) throws Exception {
    runSpice86(new File(configuration.spice86Exe), exe, dataOutputFolder);
  }

  private void runSpice86(File spice86Exe, File exe, File dataOutputFolder) throws Exception {
    log.logSection("Executing spice86");
    Utils.runExecutable(spice86Exe.getCanonicalPath(),
        "--Exe", exe.getCanonicalPath(),
        "--DumpDataOnExit", "true",
        "--RecordedDataDirectory", dataOutputFolder.getCanonicalPath(),
        "--VerboseLogs", "true",
        "--HeadlessMode", "true");
  }

  private void runGhidra(File spice86RunRoot, File ghidraRunRoot) throws Exception {
    log.logSection("Executing Ghidra");

    File memoryDump = getMemoryDumpFile(spice86RunRoot);

    generateCodeGeneratorConfig(spice86RunRoot);

    String headlessCommand = configuration.ghidraHome + "/support/analyzeHeadless";

    Map<String, String> environment = Map.of("SPICE86_DUMPS_FOLDER", spice86RunRoot.getCanonicalPath());
    Utils.runExecutable(environment, headlessCommand, ghidraRunRoot.getCanonicalPath(), memoryDump.getName(), "-import",
        memoryDump.getCanonicalPath(), "-processor", "x86:LE:16:Real Mode", "-preScript", "Spice86PluginRunner.java",
        "-scriptPath", configuration.scriptPath, "-noanalysis");
  }

  private File getMemoryDumpFile(File root) throws IOException {
    return new File(root.getCanonicalPath() + "/spice86dumpMemoryDump.bin");
  }

  private void generateCodeGeneratorConfig(File configurationFolder) throws IOException {
    File codeGeneratorConfig = new File(configurationFolder.getCanonicalPath() + "/CodeGeneratorConfig.json");
    String json = """
        {
          "Namespace": "generatedCodeTestProject",
          "GenerateCheckExternalEventsBeforeInstruction": false
        }""";
    FileWriter fileWriter = new FileWriter(codeGeneratorConfig, StandardCharsets.UTF_8);
    fileWriter.write(json);
    fileWriter.close();
  }

  private File createAndBuildTestProject(File projectRoot, File generatedCode, File exe)
      throws IOException, InterruptedException, NoSuchAlgorithmException {
    log.logSection("Instantiating spice86 generated code template project");
    Utils.runExecutable(projectRoot, null, "dotnet", "new", "spice86.project");
    log.logSection("Copying generated code");
    Utils.copy(generatedCode, projectRoot);
    log.logSection("Injecting exe SHA-256");
    String sha256 = Utils.sha256(exe);
    File programCs = new File(projectRoot.getCanonicalPath() + "/Program.cs");
    Utils.replaceInFile(programCs, "SUPPORTED_EXE_CHECKSUM", sha256);
    Utils.runExecutable(projectRoot, null, "dotnet", "build");
    return new File(projectRoot.getCanonicalPath() + "/bin/Debug/net7.0/generatedCodeTestProject");
  }

  private boolean compareMemoryDumps(File emulatedRoot, File generatedRoot) throws IOException {
    log.logSection("Comparing memory dumps between emulated and generated code");
    File emulatedDumpFile = getMemoryDumpFile(emulatedRoot);
    File generatedDumpFile = getMemoryDumpFile(generatedRoot);
    byte[] emulatedRam = Files.readAllBytes(emulatedDumpFile.toPath());
    byte[] generatedRam = Files.readAllBytes(generatedDumpFile.toPath());
    if (emulatedRam.length != generatedRam.length) {
      log.error("Emulated and generated ram files are not the same sizes!");
      return false;
    }
    for (int i = 0; i < emulatedRam.length; i++) {
      byte emulated = emulatedRam[i];
      byte generated = generatedRam[i];
      if (emulated != generated) {
        log.error("Emulated and generated ram files differ at address " + i + " emulated:" + emulated + " generated:"
                + generated);
        return false;
      }
    }
    log.info("Memory dumps match, SUCCESS!");
    return true;
  }
}

class CommandLineParser {
  Configuration generateConfiguration(String[] args) {
    Configuration res = new Configuration();
    for (String arg : args) {
      String[] split = arg.split("=");
      if (split.length != 2) {
        displayHelpAndQuit("Cannot parse argument " + arg);
      }
      String key = split[0].replaceAll("--", "");
      String value = split[1];
      switch (key) {
        case "spice86Exe" -> res.spice86Exe = value;
        case "testBinRoot" -> res.testBinRoot = value;
        case "ghidraHome" -> res.ghidraHome = value;
        case "scriptPath" -> res.scriptPath = value;
        case "workspace" -> res.workspace = value;
        case "skipTemplateUpdate" -> res.skipTemplateUpdate = Boolean.parseBoolean(value);
        case "testsToSkip" -> res.testsToSkip = new HashSet<>(Arrays.asList(value.split(",")));
        default -> displayHelpAndQuit("Unsupported option " + key);
      }
    }
    if (!res.isComplete()) {
      displayHelpAndQuit("Required parameter missing");
    }
    return res;
  }

  private void displayHelpAndQuit(String error) {
    String help = """
        Valid arguments are:
        --spice86Exe=...: Path to spice86 binary
        --testBinRoot=...: Path to the folder containing the test cases
        --ghidraHome=...: Path to ghidra home folder
        --scriptPath=...: Path to the headless Spice86PluginRunner.java script
        --workspace=...: Optional, Path to workspace for all the files for a run. If not specified will run in a temp directory.
        --skipTemplateUpdate=:... Optional. If true, will not install the spice86 template and use whatever is configured in the system
        --testsToSkip=... Optional. List of comma separated names of tests to skip. To skip add.bin and sub.bin, write --testsToSkip=add,sub""";
    System.out.println(error + "\n" + help);
    System.exit(1);
  }
}

class Configuration {
  String spice86Exe;
  String testBinRoot;
  String ghidraHome;
  String scriptPath;
  String workspace;
  boolean skipTemplateUpdate;

  Set<String> testsToSkip = new HashSet<>();

  public boolean isComplete() {
    return spice86Exe != null && testBinRoot != null && ghidraHome != null && scriptPath != null;
  }
}

class Utils {
  public static void runExecutable(String... command) throws IOException, InterruptedException {
    runExecutable(null, command);
  }

  public static void runExecutable(File runDirectory, Map<String, String> environment, String... command)
      throws IOException, InterruptedException {
    ProcessBuilder builder = new ProcessBuilder();
    builder.redirectError(ProcessBuilder.Redirect.INHERIT);
    builder.redirectOutput(ProcessBuilder.Redirect.INHERIT);
    builder.command(command);
    if (environment != null) {
      Map<String, String> currentEnvironment = builder.environment();
      currentEnvironment.putAll(environment);
      System.out.println("Running with specified env: " + environment);
    }
    System.out.println("Running command: " + String.join(" ", command));
    if (runDirectory != null) {
      System.out.println("Directory when to run command: " + runDirectory);
      builder.directory(runDirectory);
    }
    Process process = builder.start();
    int res = process.waitFor();
    if (res != 0) {
      throw new RuntimeException("Subprocess exited with return code " + res);
    }
  }

  public static void runExecutable(Map<String, String> environment, String... command)
      throws IOException, InterruptedException {
    runExecutable(null, environment, command);
  }

  public static File mkdir(File parent, String dir) throws IOException {
    File res = new File(parent.getCanonicalPath() + "/" + dir + "/");
    res.mkdirs();
    return res;
  }

  public static String byteArrayToHexString(byte[] value) {
    StringBuilder stringBuilder = new StringBuilder(value.length * 2);
    for (byte b : value) {
      stringBuilder.append(String.format("%02X", b));
    }
    return stringBuilder.toString();
  }

  public static void copy(File file, File folder) throws IOException {
    System.out.println("Copying " + file + " to folder " + folder);
    CopyOption[] options = { StandardCopyOption.REPLACE_EXISTING };
    File destination = new File(folder.getCanonicalPath() + "/" + file.getName());
    Files.copy(file.toPath(), destination.toPath(), options);
  }

  public static String sha256(File file) throws NoSuchAlgorithmException, IOException {
    MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
    byte[] fileContent = Files.readAllBytes(file.toPath());
    byte[] hash = messageDigest.digest(fileContent);
    return Utils.byteArrayToHexString(hash);
  }

  public static void replaceInFile(File file, String original, String replacement) throws IOException {
    System.out.println("Replacing " + original + " with " + replacement + " in " + file);
    Path path = file.toPath();
    Charset charset = StandardCharsets.UTF_8;
    String content = new String(Files.readAllBytes(path), charset);
    String newContent = content.replaceAll(original, replacement);
    Files.write(path, newContent.getBytes(charset));
  }
}

class Log {
  private String context;

  public void setContext(String context) {
    this.context = context;
  }

  public void info(String message) {
    log("[INFO] " + getContextPrint() + message);
  }

  public void error(String message) {
    log("[ERROR] " + getContextPrint() + message);
  }

  public void logSection(String message) {
    String dashs = "----------------------";
    log("\n\n" + dashs + " " + getContextPrint() + message + " " + dashs);
  }

  public void logSectionSpace() {
    log("\n\n\n\n");
  }

  private void log(String message) {
    System.out.println(message);
  }

  private String getContextPrint() {
    if (this.context != null) {
      return "[" + this.context + "] ";
    }
    return "";
  }
}